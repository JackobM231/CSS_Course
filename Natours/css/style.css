@charset "UTF-8";
/*
COLORS:
Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485
*/
/* What is happening in each frame in our animation function */
@keyframes moveInLeft {
  /* What have to be done in x% of animation */
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    /*krycie, nieprzezroczystość*/
    transform: translateX(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInButton {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

/* Clearing all elements */
*,
*::after,
*::before {
  /* To prevent odd behaviours of ours pseudoclasses in the future */
  margin: 0;
  padding: 0;
  box-sizing: inherit;
  /* We forced the box-sizing to inherit from the body element*/ }

html {
  font-size: 62.5%;
  /* We set this value to use rem instead of px in our stylesheet.
  We change 10px for 62.5%(=10px. default browser font size = 16px) to enable users better accessibility to our page. 
  They can now change default font-size of their browser (if they need to).
  Previous versions od IE9 does not support rem*/ }

body {
  box-sizing: border-box;
  /* Borders and paddings are no longer added to total width and total height specified for the box */ }

body {
  font-family: "Lato", sans-serif;
  /* Every change to font better set in body selector, they are inherited in all body */
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  /* 1.7 times bigger than predefined line-height */
  color: #777;
  padding: 3rem;
  /* Padding is not getting iherited. It make 30px padding around entire body */ }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  /* Trick to avoid a little shaking in animation (in heading-primary-main and sub) */
  margin-bottom: 6rem;
  /* Span element is by default inline element so it is like text
  Block element take entire available space and next block element is forced to be under*/ }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    /* The speed of the animation depending on its phase */
    /* 
    Animation-delay: 3s;
    Animation-iteration-count: 3;  X times it has to be run
    */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1s ease-out;
    /* CSS knows what is what (animation-name, duration, timing-function)*/ }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  display: inline-block;
  /* It was block so it took all avilable width. Now as inline-block it takes only
  as much as it needs to display */
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  background-clip: text;
  -webkit-background-clip: text;
  /* It clips background exacly where the text is. So de gradient will be visible only where the text is */
  color: transparent;
  /* Now we want to see the background(gradient), not the text color */
  letter-spacing: .2rem;
  transition: all .2s; }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2);
    /* x-direction y-direction blur */ }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.u-center-text {
  text-align: center; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem; }

.u-margin-bottom-medium {
  margin-bottom: 4em; }

.u-margin-bottom-big {
  margin-bottom: 8rem; }

.u-margin-top-big {
  margin-top: 8rem; }

.u-margin-top-huge {
  margin-top: 10rem; }

.btn {
  /* :link is pseudo class - specjal state of selector that we use to style selector under specjal conditions */
  /* It is treated as child of .btn */ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    /* Underline */
    padding: 1.5rem 4rem;
    /* Top,bottom  left,right */
    display: inline-block;
    /* Inline-block, the top and bottom margins/paddings are respected, but with display: inline they are not */
    border-radius: 10rem;
    transition: all .2s;
    /* Which properties we want to animate in states: All properties are enabled to be animated, time that we want */
    position: relative;
    font-size: 1.6rem; }
  .btn:hover {
    transform: translateY(-0.3rem);
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
    /* <offset-x> <offset-y> <blur-radius>? <spread-radius>? <color>? */
    /* It is after sudoelement only when we have .btn on the hover state */ }
    .btn:hover::after {
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0; }
  .btn:active {
    transform: translateY(-0.1rem);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn--green {
    background-color: #55c57a;
    color: #fff; }
    .btn--green::after {
      background-color: #55c57a; }
  .btn::after {
    content: "";
    /* Have to add sth cause otherwise it will not work */
    display: inline-block;
    /* Like parent */
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /* 100% of parent properties */
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all .4s; }
  .btn--animated {
    animation: moveInButton .5s ease-out .75s;
    /* animation function, duration, timing-function, delay */
    animation-fill-mode: backwards;
    /* Set opacity 0 before animation start */ }

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px;
  transition: all .2s; }

.btn-text:hover {
  background-color: #55c57a;
  color: #fff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px); }

.btn-text:active {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  transform: translateY(0px); }

.card {
  perspective: 150rem;
  /* Need to be in parent element */
  -moz-perspective: 150rem;
  /* Simply to work on the firefox browser */
  position: relative;
  height: 52rem;
  /* To fix lack of height and lack of perspective */ }
  .card__side {
    height: 52rem;
    transition: all .8s ease;
    /* Ease more smooth animation */
    position: absolute;
    /* We give elements absolute position so they will try to fit to their width
    and their height collapsed */
    top: 0;
    left: 0;
    width: 100%;
    backface-visibility: hidden;
    /* Crutial property. It hides back-part of the element */
    border-radius: 3px;
    overflow: hidden;
    /* To stop chldren image overflowing parent element */
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15); }
    .card__side--front {
      background-color: #fff; }
    .card__side--back {
      transform: rotateY(180deg); }
      .card__side--back-1 {
        background-image: linear-gradient(to right bottom, #ffb900, #ff7730); }
      .card__side--back-2 {
        background-image: linear-gradient(to right bottom, #7ed56f, #28b485); }
      .card__side--back-3 {
        background-image: linear-gradient(to right bottom, #2998ff, #5643fa); }
  .card:hover .card__side--front {
    transform: rotateY(-180deg); }
  .card:hover .card__side--back {
    transform: rotateY(0deg); }
  .card__picture {
    background-size: cover;
    height: 23rem;
    background-blend-mode: screen;
    /* It blend background image: color and background. It has many possible effects. */
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    /* To ensure compatibility with older browsers */
    clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    border-top-left-radius: 3px;
    border-top-right-radius: 3px; }
    .card__picture--1 {
      background-image: linear-gradient(to right bottom, #ffb900, #ff7730), url(../img/nat-5.jpg); }
    .card__picture--2 {
      background-image: linear-gradient(to right bottom, #7ed56f, #28b485), url(../img/nat-6.jpg); }
    .card__picture--3 {
      background-image: linear-gradient(to right bottom, #2998ff, #5643fa), url(../img/nat-7.jpg); }
  .card__heading {
    font-size: 2.8rem;
    font-weight: 300;
    text-transform: uppercase;
    text-align: right;
    color: #fff;
    position: absolute;
    top: 12rem;
    right: 2rem;
    width: 75%; }
  .card__heading-span {
    padding: 1rem 1.5rem;
    -webkit-box-decoration-break: clone;
    box-decoration-break: clone;
    /* It makes that each element is styled independently from each other.
     In our example padding */ }
    .card__heading-span--1 {
      background-image: linear-gradient(to right bottom, rgba(255, 185, 0, 0.85), rgba(255, 119, 48, 0.85)); }
    .card__heading-span--2 {
      background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.85), rgba(40, 180, 133, 0.85)); }
    .card__heading-span--3 {
      background-image: linear-gradient(to right bottom, rgba(41, 152, 255, 0.85), rgba(86, 67, 250, 0.85)); }
  .card__details {
    padding: 3rem; }
    .card__details ul {
      list-style: none;
      width: 80%;
      margin: 0 auto;
      /* Easiest way to center block element inside block element */ }
      .card__details ul li {
        text-align: center;
        font-size: 1.5rem;
        padding: 1rem; }
        .card__details ul li:not(:last-child) {
          border-bottom: 1px solid #eee; }
  .card__cta {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
    /* We need to add this property to avoid wrong fitting of 'book now' */
    text-align: center; }
  .card__price-box {
    text-align: center;
    color: #fff;
    margin-bottom: 8rem; }
  .card__price-only {
    font-size: 1.4rem;
    text-transform: uppercase; }
  .card__price-value {
    font-size: 6rem;
    font-weight: 100; }

.composition {
  position: relative; }
  .composition__photo {
    width: 55%;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
    border-radius: 2px;
    position: absolute;
    z-index: 10;
    transition: all .2s;
    outline-offset: 2rem;
    /* Space between image and outline */ }
    .composition__photo--p1 {
      left: 0;
      top: -2rem; }
    .composition__photo--p2 {
      right: 0;
      top: 2rem; }
    .composition__photo--p3 {
      left: 20%;
      top: 10rem; }
    .composition__photo:hover {
      outline: 1.5rem solid #55c57a;
      /* Green outline */
      transform: scale(1.05) translateY(-0.5rem);
      box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
      z-index: 20; }
  .composition:hover .composition__photo:not(:hover) {
    /* composition:hover composition__photo:not(:hover)
  When we select composition, select photo that is not hover */
    transform: scale(0.95); }

.feature-box {
  background-color: rgba(255, 255, 255, 0.8);
  font-size: 1.5rem;
  padding: 2.5rem;
  text-align: center;
  border-radius: 3px;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
  transition: transform .3s; }
  .feature-box__icon {
    font-size: 6rem;
    /* This type of icons is treated as text */
    background-image: linear-gradient(to right, #7ed56f, #28b485);
    display: inline-block;
    background-clip: text;
    -webkit-background-clip: text;
    /* It clips background exacly where the text is. So de gradient will be visible only where the text is */
    color: transparent;
    /* Now we want to see the background(gradient), not the text color */ }
  .feature-box:hover {
    transform: translateY(-1.5rem) scale(1.03); }

.row {
  max-width: 114rem;
  /*One of standards is 1140px, our ram id 10px so 1140px = 114rem.
  Max-width fills available space if there is not enought */
  margin: 0 auto;
  /* Trick for center block element inside of another block element. Margin at tob and bottom is 0,
  left and right is auto */
  /* Our row (thanks to the fact that all childrens of it are floated) has a height od 0.
   So the element height collapsed and becomes 0. To avoid this we use mixin clearfix. */ }
  .row:not(:last-child) {
    /* Sudo-class. Thanks to 'not' we select all except the last child (.row:last-child()) */
    margin-bottom: 8rem; }
  .row::after {
    /* Insert some text after the content of each & element */
    content: "";
    /* Without this, sudo element will not appear on page */
    display: table;
    /* Clearfix standar to display table */
    clear: both;
    /* Clear float left or right */ }
  .row [class^="col-"] {
    /* We choose all elements with [attribute] eg. [alt="Logo"].
  Now we select all the attribute elements of the class that start with "col-" this is what ^= does.
  *= choose all elements that have "col-" wherever in the class attribute.
  $= choose all elements that have "col-" at the end of the class attribute. */
    float: left;
    /* Because we use here float layouts we need to float these columns. We always float to left side. */ }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem;
      /* Gutters between columns are right-margins of left column */ }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2);
    /* calc function allows us to calculate using mixed units. In SASS in calc to use variables we need to wrap
    them into   */ }
  .row .col-1-of-3 {
    width: calc((100% -  2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc(2 * ((100% -  2 * 6rem) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% -  3 * 6rem) / 4); }
  .row .col-2-of-4 {
    width: calc(2 * ((100% -  3 * 6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc(3 * ((100% -  3 * 6rem) / 4) + 2 * 6rem); }

.header {
  height: 95vh;
  /* Height of this element sholud be 95% of viewport height */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  /* We have two background images first on top gradient, and second under img */
  background-size: cover;
  /* Whatever the width of viewport or element is it will try to fit it into this box */
  background-position: top;
  /* Top(bottom or center) of background will always be in top border of container */
  position: relative;
  /*Positioned relative to its normal position. Now we can move it thanks to top, left,...*/
  -webkit-clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* Property creates a clipping region that sets what part of an element should be shown.
  First point top-left corner (next points clockwise) (bennettfeely.com/clippy/) */ }
  .header__logo-box {
    /* & ampersand copies the selector it is in. In this example & = .header */
    position: absolute;
    /* Is positioned relative to the nearest positioned ancestor (position: relative;) */
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    /*Position to parent element */
    transform: translate(-50%, -50%);
    /* Element starting position is left and top border. We centered our element to itself position. */
    text-align: center;
    /* Property for .btn because display: inline-block is treated as text */ }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh;
  /*We are expanding our background up on the header to cover white triangle 
  95vh-70vh=20vh */ }

.section-features {
  padding: 20rem 0;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/nat-4.jpg);
  /* We have two background images first on top gradient, and second under img */
  background-size: cover;
  /* Cover entire available space in section */
  transform: skewY(-7deg);
  /* Skew entire section */
  margin-top: -10rem; }
  .section-features > * {
    /* All directed children (it means only first generation) of section features. In our example it will be "row".
  Without this every further children would be eg. skew*/
    transform: skewY(7deg);
    /* Unskew our row */ }

.section-tours {
  background-color: #f7f7f7;
  padding: 25rem 0 15rem 0;
  /* Top Right Bottom Left */
  margin-top: -10rem; }
