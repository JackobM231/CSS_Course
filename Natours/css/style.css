@charset "UTF-8";
/*
0 - 600px:      Phone
600 - 900px:    Tablet portrait
900 - 1200px:   Tablet landcsape
[1200 - 1800px] is where our normal styles apply
1800px + :      Big desktop

$breakpoint argument choices:
- phone
- tab-port
- tab-land
- big-desktop

ORDER: base + typography > general layout + grid > page layout > components

1em = 16px
*/
/*
COLORS:
Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485
*/
/* What is happening in each frame in our animation function */
@keyframes moveInLeft {
  /* What have to be done in x% of animation */
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    /*krycie, nieprzezroczystość*/
    transform: translateX(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInButton {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

/* Clearing all elements */
*,
*::after,
*::before {
  /* To prevent odd behaviours of ours pseudoclasses in the future */
  margin: 0;
  padding: 0;
  box-sizing: inherit;
  /* We forced the box-sizing to inherit from the body element*/ }

html {
  font-size: 62.5%;
  /* We set this value to use rem instead of px in our stylesheet.
  We change 10px for 62.5%(=10px. default browser font size = 16px) to enable users better accessibility to our page. 
  They can now change default font-size of their browser (if they need to).
  Previous versions od IE9 does not support rem*/
  /* $breakpoint is argument that we pass in*/
  /* $breakpoint is argument that we pass in*/
  /* $breakpoint is argument that we pass in*/ }
  @media (max-width: 75em) {
    html {
      font-size: 56.25%;
      /* Content we are putting into mixin */ } }
  @media (max-width: 56.25em) {
    html {
      font-size: 50%; } }
  @media (min-width: 112.5em) {
    html {
      font-size: 75%; } }

body {
  box-sizing: border-box;
  /* Borders and paddings are no longer added to total width and total height specified for the box */
  padding: 3rem;
  /* Padding is not getting iherited. It make 30px padding around entire body */
  /* $breakpoint is argument that we pass in*/ }
  @media (max-width: 56.25em) {
    body {
      padding: 0; } }

body {
  font-family: "Lato", sans-serif;
  /* Every change to font better set in body selector, they are inherited in all body */
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  /* 1.7 times bigger than predefined line-height */
  color: #777; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  /* Trick to avoid a little shaking in animation (in heading-primary-main and sub) */
  margin-bottom: 6rem;
  /* Span element is by default inline element so it is like text
  Block element take entire available space and next block element is forced to be under*/ }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    /* The speed of the animation depending on its phase */
    /* $breakpoint is argument that we pass in*/
    /* @content allows us to pass a block of code into a mixin */
    /* 
    Animation-delay: 3s;
    Animation-iteration-count: 3;  X times it has to be run
    */ }
    @media (max-width: 37.5em) {
      .heading-primary--main {
        letter-spacing: 1rem;
        font-family: 5rem; } }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1s ease-out;
    /* CSS knows what is what (animation-name, duration, timing-function)*/
    /* $breakpoint is argument that we pass in*/
    /* @content allows us to pass a block of code into a mixin */ }
    @media (max-width: 37.5em) {
      .heading-primary--sub {
        letter-spacing: .5rem; } }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  display: inline-block;
  /* It was block so it took all avilable width. Now as inline-block it takes only
  as much as it needs to display */
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  background-clip: text;
  -webkit-background-clip: text;
  /* It clips background exacly where the text is. So de gradient will be visible only where the text is */
  color: transparent;
  /* Now we want to see the background(gradient), not the text color */
  letter-spacing: .2rem;
  transition: all .2s;
  /* $breakpoint is argument that we pass in*/
  /* $breakpoint is argument that we pass in*/
  /* @content allows us to pass a block of code into a mixin */ }
  @media (max-width: 56.25em) {
    .heading-secondary {
      font-size: 3rem; } }
  @media (max-width: 37.5em) {
    .heading-secondary {
      /* Phone is smaller so it is after tab-port */
      font-size: 2.5rem; } }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2);
    /* x-direction y-direction blur */ }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.u-center-text {
  text-align: center !important; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem !important; }

.u-margin-bottom-medium {
  margin-bottom: 4em !important;
  /* $breakpoint is argument that we pass in*/ }
  @media (max-width: 56.25em) {
    .u-margin-bottom-medium {
      margin-bottom: 3rem !important; } }

.u-margin-bottom-big {
  margin-bottom: 8rem !important;
  /* $breakpoint is argument that we pass in*/ }
  @media (max-width: 56.25em) {
    .u-margin-bottom-big {
      margin-bottom: 5rem !important; } }

.u-margin-top-big {
  margin-top: 8rem !important; }

.u-margin-top-huge {
  margin-top: 10rem !important; }

.bg-video {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  z-index: -1;
  opacity: .15;
  overflow: hidden; }
  .bg-video__content {
    height: 100%;
    width: 100%;
    object-fit: cover;
    /* Will fill the entire parent while still maintaining its aspect ratio.
    Not fitting part is cutted off */ }

.btn {
  /* :link is pseudo class - specjal state of selector that we use to style selector under specjal conditions */
  /* It is treated as child of .btn */ }
  .btn, .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    /* Underline */
    padding: 1.5rem 4rem;
    /* Top,bottom  left,right */
    display: inline-block;
    /* Inline-block, the top and bottom margins/paddings are respected, but with display: inline they are not */
    border-radius: 10rem;
    transition: all .2s;
    /* Which properties we want to animate in states: All properties are enabled to be animated, time that we want */
    position: relative;
    font-size: 1.6rem;
    border: none;
    cursor: pointer; }
  .btn:hover {
    transform: translateY(-0.3rem);
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
    /* <offset-x> <offset-y> <blur-radius>? <spread-radius>? <color>? */
    /* It is after sudoelement only when we have .btn on the hover state */ }
    .btn:hover::after {
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0; }
  .btn:active, .btn:focus {
    outline: none;
    transform: translateY(-0.1rem);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn--green {
    background-color: #55c57a;
    color: #fff; }
    .btn--green::after {
      background-color: #55c57a; }
  .btn::after {
    content: "";
    /* Have to add sth cause otherwise it will not work */
    display: inline-block;
    /* Like parent */
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /* 100% of parent properties */
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all .4s; }
  .btn--animated {
    animation: moveInButton .5s ease-out .75s;
    /* animation function, duration, timing-function, delay */
    animation-fill-mode: backwards;
    /* Set opacity 0 before animation start */ }

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px;
  transition: all .2s; }

.btn-text:hover {
  background-color: #55c57a;
  color: #fff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px); }

.btn-text:active {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  transform: translateY(0px); }

.card {
  perspective: 150rem;
  /* Need to be in parent element */
  -moz-perspective: 150rem;
  /* Simply to work on the firefox browser */
  position: relative;
  height: 52rem;
  /* To fix lack of height and lack of perspective */
  /* $breakpoint is argument that we pass in*/ }
  .card__side {
    height: 52rem;
    transition: all .8s ease;
    /* Ease more smooth animation */
    position: absolute;
    /* We give elements absolute position so they will try to fit to their width
    and their height collapsed */
    top: 0;
    left: 0;
    width: 100%;
    backface-visibility: hidden;
    /* Crutial property. It hides back-part of the element */
    border-radius: 3px;
    overflow: hidden;
    /* To stop chldren image overflowing parent element */
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15); }
    .card__side--front {
      background-color: #fff; }
    .card__side--back {
      transform: rotateY(180deg); }
      .card__side--back-1 {
        background-image: linear-gradient(to right bottom, #ffb900, #ff7730); }
      .card__side--back-2 {
        background-image: linear-gradient(to right bottom, #7ed56f, #28b485); }
      .card__side--back-3 {
        background-image: linear-gradient(to right bottom, #2998ff, #5643fa); }
  .card:hover .card__side--front {
    transform: rotateY(-180deg); }
  .card:hover .card__side--back {
    transform: rotateY(0deg); }
  .card__picture {
    background-size: cover;
    height: 23rem;
    background-blend-mode: screen;
    /* It blend background image: color and background. It has many possible effects. */
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    /* To ensure compatibility with older browsers */
    clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    border-top-left-radius: 3px;
    border-top-right-radius: 3px;
    backface-visibility: hidden; }
    .card__picture--1 {
      background-image: linear-gradient(to right bottom, #ffb900, #ff7730), url(../img/nat-5.jpg); }
    .card__picture--2 {
      background-image: linear-gradient(to right bottom, #7ed56f, #28b485), url(../img/nat-6.jpg); }
    .card__picture--3 {
      background-image: linear-gradient(to right bottom, #2998ff, #5643fa), url(../img/nat-7.jpg); }
  .card__heading {
    font-size: 2.8rem;
    font-weight: 300;
    text-transform: uppercase;
    text-align: right;
    color: #fff;
    position: absolute;
    top: 12rem;
    right: 2rem;
    width: 75%;
    backface-visibility: hidden; }
  .card__heading-span {
    padding: 1rem 1.5rem;
    -webkit-box-decoration-break: clone;
    box-decoration-break: clone;
    /* It makes that each element is styled independently from each other.
     In our example padding */ }
    .card__heading-span--1 {
      background-image: linear-gradient(to right bottom, rgba(255, 185, 0, 0.85), rgba(255, 119, 48, 0.85)); }
    .card__heading-span--2 {
      background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.85), rgba(40, 180, 133, 0.85)); }
    .card__heading-span--3 {
      background-image: linear-gradient(to right bottom, rgba(41, 152, 255, 0.85), rgba(86, 67, 250, 0.85)); }
  .card__details {
    padding: 3rem; }
    .card__details ul {
      list-style: none;
      width: 80%;
      margin: 0 auto;
      /* Easiest way to center block element inside block element */ }
      .card__details ul li {
        text-align: center;
        font-size: 1.5rem;
        padding: 1rem; }
        .card__details ul li:not(:last-child) {
          border-bottom: 1px solid #eee; }
  .card__cta {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
    /* We need to add this property to avoid wrong fitting of 'book now' */
    text-align: center; }
  .card__price-box {
    text-align: center;
    color: #fff;
    margin-bottom: 8rem; }
  .card__price-only {
    font-size: 1.4rem;
    text-transform: uppercase; }
  .card__price-value {
    font-size: 6rem;
    font-weight: 100; }
  @media (max-width: 56.25em) {
    .card {
      height: auto;
      border-radius: 3px;
      background-color: #fff;
      box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15); }
      .card__side {
        height: auto;
        position: relative;
        box-shadow: none; }
        .card__side--back {
          transform: rotateY(0);
          clip-path: polygon(0 15%, 100% 0, 100% 100%, 0 100%); }
      .card:hover .card__side--front {
        transform: rotateY(0); }
      .card:hover .card__side--back {
        transform: rotateY(0); }
      .card__details {
        padding: 1rem 3rem; }
      .card__cta {
        position: relative;
        top: 0%;
        left: 0%;
        transform: translate(0);
        width: 100%;
        padding: 7rem 4rem 4rem 4rem; }
      .card__price-box {
        margin-bottom: 3rem; }
      .card__price-value {
        font-size: 4rem; } }

.composition {
  position: relative; }
  .composition__photo {
    width: 55%;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
    border-radius: 2px;
    position: absolute;
    z-index: 10;
    transition: all .2s;
    outline-offset: 2rem;
    /* Space between image and outline */
    /* $breakpoint is argument that we pass in*/ }
    @media (max-width: 56.25em) {
      .composition__photo {
        float: left;
        position: relative;
        width: 33.333333%;
        box-shadow: 0 1.5rem 3rem rgba(0, 0, 0, 0.2); } }
    .composition__photo--p1 {
      left: 0;
      top: -2rem;
      /* $breakpoint is argument that we pass in*/ }
      @media (max-width: 56.25em) {
        .composition__photo--p1 {
          top: 0;
          transform: scale(1.2); } }
    .composition__photo--p2 {
      right: 0;
      top: 2rem;
      /* $breakpoint is argument that we pass in*/ }
      @media (max-width: 56.25em) {
        .composition__photo--p2 {
          top: -1rem;
          transform: scale(1.3);
          z-index: 100; } }
    .composition__photo--p3 {
      left: 20%;
      top: 10rem;
      /* $breakpoint is argument that we pass in*/ }
      @media (max-width: 56.25em) {
        .composition__photo--p3 {
          top: 1rem;
          left: 0;
          transform: scale(1.1); } }
    .composition__photo:hover {
      outline: 1.5rem solid #55c57a;
      /* Green outline */
      transform: scale(1.05) translateY(-0.5rem);
      box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
      z-index: 20; }
  .composition:hover .composition__photo:not(:hover) {
    /* composition:hover composition__photo:not(:hover)
  When we select composition, select photo that is not hover */
    transform: scale(0.95); }

.feature-box {
  background-color: rgba(255, 255, 255, 0.8);
  font-size: 1.5rem;
  padding: 2.5rem;
  text-align: center;
  border-radius: 3px;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
  transition: transform .3s;
  /* $breakpoint is argument that we pass in*/ }
  @media (max-width: 56.25em) {
    .feature-box {
      padding: 2rem; } }
  .feature-box__icon {
    font-size: 6rem;
    /* This type of icons is treated as text */
    background-image: linear-gradient(to right, #7ed56f, #28b485);
    display: inline-block;
    background-clip: text;
    -webkit-background-clip: text;
    /* It clips background exacly where the text is. So de gradient will be visible only where the text is */
    color: transparent;
    /* Now we want to see the background(gradient), not the text color */
    /* $breakpoint is argument that we pass in*/ }
    @media (max-width: 56.25em) {
      .feature-box__icon {
        margin-bottom: 0; } }
  .feature-box:hover {
    transform: translateY(-1.5rem) scale(1.03); }

.form__group:not(:last-child) {
  /* We style everything except for the last child */
  margin-bottom: 2rem; }

.form__input {
  font-size: 1.5rem;
  font-family: inherit;
  /* default browsers doesn't shares fonts family that we have for the web page,
    so we simply can inherit our font family */
  color: inherit;
  padding: 1.5rem 2rem;
  border-radius: 2px;
  background-color: rgba(255, 255, 255, 0.5);
  border: none;
  border-bottom: 3px solid transparent;
  /* To avoid of moving the border 3px during focus */
  width: 90%;
  display: block;
  transition: all .3s;
  /* $breakpoint is argument that we pass in*/ }
  @media (max-width: 56.25em) {
    .form__input {
      width: 100%; } }
  .form__input:focus {
    /* We should always make focus element visible */
    outline: none;
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.1);
    border-bottom: 3px solid #55c57a;
    /* border width, border style, border color */ }
    .form__input:focus:invalid {
      border-bottom: 3px solid #ff7730; }
    .form__input:focus::-webkit-input-placeholder {
      /* It specifies input-placeholder (in form) properties */
      color: #999; }

.form__label {
  font-size: 1.2rem;
  font-weight: 700;
  margin-left: 2rem;
  margin-top: .7rem;
  display: block;
  /* To use box models properties of element eg. margins */
  transition: all .3s; }

.form__input:placeholder-shown + .form__label {
  opacity: 0;
  visibility: hidden;
  /* Only opacity makes that element is on page only transparent,
    but with visibility hidden element is realy gone. 
    Later we want animate opacity */
  transform: translateY(-4rem); }

.form__radio-group {
  width: 49%;
  display: inline-block;
  /* $breakpoint is argument that we pass in*/ }
  @media (max-width: 56.25em) {
    .form__radio-group {
      width: 100%;
      margin-bottom: 2rem; } }

.form__radio-input {
  display: none;
  /* Now it is not visible but still works (checked/unchecked) */ }

.form__radio-label {
  font-size: 1.6rem;
  cursor: pointer;
  /* differen cursour during pointing down */
  position: relative;
  padding-left: 5rem; }

.form__radio-button {
  height: 3rem;
  width: 3rem;
  border: 5px solid #55c57a;
  border-radius: 50%;
  display: inline-block;
  position: absolute;
  left: 0;
  top: -.4rem; }
  .form__radio-button::after {
    content: "";
    /* Using sudo element we need to use content property and set it to come value/empty.
      Also display */
    display: block;
    height: 1.3rem;
    width: 1.3rem;
    border-radius: 50%;
    position: absolute;
    /* Parent element radio-button with specified position not necessary relative position */
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: #55c57a;
    opacity: 0;
    transition: opacity .2s; }

.form__radio-input:checked ~ .form__radio-label .form__radio-button::after {
  opacity: 1; }

.popup {
  height: 100vh;
  width: 100%;
  position: fixed;
  /* Insensitive on scrolling */
  top: 0;
  left: 0;
  background-color: rgba(0, 0, 0, 0.8);
  z-index: 3000;
  opacity: 0;
  visibility: hidden;
  transition: all .3s; }
  .popup__content {
    position: absolute;
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
    width: 75%;
    background-color: #fff;
    box-shadow: 0 2rem 4rem rgba(0, 0, 0, 0.2);
    border-radius: 3px;
    display: table;
    /* Cells have the same height */
    overflow: hidden;
    /* The part of image that extends beyond the container area is hidden */
    opacity: 0;
    transform: translate(-50%, -50%) scale(0.25);
    /* Elemen can only have one transform so we need to repeat this property and add to it (interesting us) new value */
    transition: all .5s .2s; }
  .popup__left {
    width: 33.333333%;
    display: table-cell;
    /* Same height */
    vertical-align: middle; }
  .popup__right {
    width: 66.666667%;
    display: table-cell;
    /* Same height */
    vertical-align: middle;
    /* Middle of the cell */
    padding: 3rem 5rem; }
  .popup__img {
    display: block;
    width: 100%;
    /* Entire parent's contener width */ }
  .popup__text {
    font-size: 1.4rem;
    margin-bottom: 4rem;
    -moz-column-count: 2;
    -moz-column-gap: 4rem;
    -moz-column-rule: 1px solid #eee;
    column-count: 2;
    /* Creates 2 columns */
    column-gap: 4rem;
    /* Space between columns */
    column-rule: 1px solid #eee;
    /* Column separating line */
    -moz-hyphens: auto;
    -ms-hyphens: auto;
    -webkit-hyphens: auto;
    hyphens: auto;
    /* Automaticly sets where to put the hyphens */ }
  .popup:target {
    /* Sudoclasss when popup id in some anchor element has href="#popup" and this element becomes a target */
    opacity: 1;
    visibility: visible; }
  .popup:target .popup__content {
    /* When popup becomes target we are styling the children __content */
    opacity: 1;
    transform: translate(-50%, -50%) scale(1); }
  .popup__close:link, .popup__close:visited {
    color: #777;
    position: absolute;
    /* Positioned to popup__content */
    top: 2.5rem;
    right: 2.5rem;
    font-size: 3rem;
    text-decoration: none;
    display: inline-block;
    transition: all .2s;
    line-height: 1; }
  .popup__close:hover {
    color: #55c57a; }

.story {
  width: 75%;
  margin: 0 auto;
  box-shadow: 0 3rem 6rem rgba(0, 0, 0, 0.1);
  background-color: rgba(255, 255, 255, 0.6);
  border-radius: 3px;
  padding: 6rem;
  padding-left: 9rem;
  /* To center image and text after translateX it -3rem */
  font-size: 1.6rem;
  transform: skewX(-12deg);
  /* $breakpoint is argument that we pass in*/
  /* $breakpoint is argument that we pass in*/
  /* @content allows us to pass a block of code into a mixin */ }
  @media (max-width: 56.25em) {
    .story {
      width: 100%;
      padding: 4rem;
      padding-left: 7rem; } }
  @media (max-width: 37.5em) {
    .story {
      transform: skewX(0); } }
  .story__shape {
    width: 15rem;
    height: 15rem;
    float: left;
    /* Tp make rest ot the content floated around it */
    -webkit-shape-outside: circle(50% at 50% 50%);
    /* To work on safari */
    shape-outside: circle(50% at 50% 50%);
    /* Defines were the content floats around the element
    Radious of the circle, center of the circle horizontally and vertically.
    To work the element needs to be floated, and object has defined dimensions */
    -webkit-clip-path: circle(50% at 50% 50%);
    clip-path: circle(50% at 50% 50%);
    /* If we want to element looks like the shape-outside */
    transform: translateX(-3rem) skewX(11deg);
    /* To unskew element inside of story */
    position: relative;
    /* $breakpoint is argument that we pass in*/
    /* @content allows us to pass a block of code into a mixin */ }
    @media (max-width: 37.5em) {
      .story__shape {
        transform: translateX(-3rem) skewX(0); } }
  .story__img {
    height: 100%;
    /* It is 100% of shape dimensions */
    transform: translateX(-4rem) scale(1.4);
    backface-visibility: hidden;
    transition: all .5s; }
  .story__text {
    transform: skewX(12deg);
    /* $breakpoint is argument that we pass in*/
    /* @content allows us to pass a block of code into a mixin */ }
    @media (max-width: 37.5em) {
      .story__text {
        transform: skewX(0); } }
  .story__caption {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, 20%);
    color: #fff;
    text-transform: uppercase;
    font-size: 1.7rem;
    text-align: center;
    opacity: 0;
    transition: all .5s;
    backface-visibility: hidden;
    /* To hide a little move at the end of the animation */ }
  .story:hover .story__caption {
    opacity: 1;
    transform: translate(-50%, -50%); }
  .story:hover .story__img {
    transform: translateX(-4rem) scale(1);
    filter: blur(3px) brightness(80%); }

.footer {
  background-color: #333;
  padding: 10rem 0;
  font-size: 1.4rem;
  /* $breakpoint is argument that we pass in*/ }
  @media (max-width: 56.25em) {
    .footer {
      padding: 8rem 0; } }
  .footer__logo-box {
    text-align: center;
    margin-bottom: 8rem;
    /* $breakpoint is argument that we pass in*/ }
    @media (max-width: 56.25em) {
      .footer__logo-box {
        margin-bottom: 6rem; } }
  .footer__logo {
    width: 15rem;
    height: auto; }
  .footer__navigation {
    border-top: 1px solid #777;
    padding-top: 2rem;
    display: inline-block;
    /* Does not occupy 100%, only as much as it needs */
    /* $breakpoint is argument that we pass in*/ }
    @media (max-width: 56.25em) {
      .footer__navigation {
        width: 100%;
        text-align: center; } }
  .footer__list {
    list-style: none; }
  .footer__item {
    display: inline-block; }
    .footer__item:not(:last-child) {
      margin-right: 1.5rem; }
  .footer__link:link, .footer__link:visited {
    color: #f7f7f7;
    background-color: #333;
    text-decoration: none;
    text-transform: uppercase;
    display: inline-block;
    transition: all .2s; }
  .footer__link:hover, .footer__link:active {
    color: #55c57a;
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.4);
    transform: rotate(5deg) scale(1.3); }
  .footer__copyright {
    color: #f7f7f7;
    border-top: 1px solid #777;
    padding-top: 2rem;
    width: 80%;
    float: right;
    /* $breakpoint is argument that we pass in*/ }
    @media (max-width: 56.25em) {
      .footer__copyright {
        width: 100%;
        float: none; } }

.row {
  max-width: 114rem;
  /*One of standards is 1140px, our ram id 10px so 1140px = 114rem.
  Max-width fills available space if there is not enought */
  margin: 0 auto;
  /* Trick for center block element inside of another block element. Margin at tob and bottom is 0,
  left and right is auto */
  /* $breakpoint is argument that we pass in*/
  /* Our row (thanks to the fact that all childrens of it are floated) has a height od 0.
   So the element height collapsed and becomes 0. To avoid this we use mixin clearfix. */ }
  .row:not(:last-child) {
    /* Sudo-class. Thanks to 'not' we select all except the last child (.row:last-child()) */
    margin-bottom: 8rem;
    /* $breakpoint is argument that we pass in*/ }
    @media (max-width: 56.25em) {
      .row:not(:last-child) {
        margin-bottom: 6rem; } }
  @media (max-width: 56.25em) {
    .row {
      max-width: 50rem;
      padding: 0 3rem; } }
  .row::after {
    /* Insert some text after the content of each & element */
    content: "";
    /* Without this, sudo element will not appear on page */
    display: table;
    /* Clearfix standar to display table */
    clear: both;
    /* Clear float left or right */ }
  .row [class^="col-"] {
    /* We choose all elements with [attribute] eg. [alt="Logo"].
  Now we select all the attribute elements of the class that start with "col-" this is what ^= does.
  *= choose all elements that have "col-" wherever in the class attribute.
  $= choose all elements that have "col-" at the end of the class attribute. */
    float: left;
    /* Because we use here float layouts we need to float these columns. We always float to left side. */
    /* $breakpoint is argument that we pass in*/ }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem;
      /* Gutters between columns are right-margins of left column */
      /* $breakpoint is argument that we pass in*/ }
      @media (max-width: 56.25em) {
        .row [class^="col-"]:not(:last-child) {
          margin-right: 0;
          margin-bottom: 6rem; } }
    @media (max-width: 56.25em) {
      .row [class^="col-"] {
        width: 100% !important;
        /* We are creating only one column in all rows */ } }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2);
    /* calc function allows us to calculate using mixed units. In SASS in calc to use variables we need to wrap
    them into   */ }
  .row .col-1-of-3 {
    width: calc((100% -  2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc(2 * ((100% -  2 * 6rem) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% -  3 * 6rem) / 4); }
  .row .col-2-of-4 {
    width: calc(2 * ((100% -  3 * 6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc(3 * ((100% -  3 * 6rem) / 4) + 2 * 6rem); }

.header {
  height: 95vh;
  /* Height of this element sholud be 95% of viewport height */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  /* We have two background images first on top gradient, and second under img */
  background-size: cover;
  /* Whatever the width of viewport or element is it will try to fit it into this box */
  background-position: top;
  /* Top(bottom or center) of background will always be in top border of container */
  position: relative;
  /*Positioned relative to its normal position. Now we can move it thanks to top, left,...*/
  -webkit-clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 95%);
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 95%);
  /* Property creates a clipping region that sets what part of an element should be shown.
  First point top-left corner (next points clockwise) (bennettfeely.com/clippy/) */
  /* $breakpoint is argument that we pass in*/
  /* @content allows us to pass a block of code into a mixin */ }
  @media (max-width: 37.5em) {
    .header {
      -webkit-clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%);
      clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%); } }
  .header__logo-box {
    /* & ampersand copies the selector it is in. In this example & = .header */
    position: absolute;
    /* Is positioned relative to the nearest positioned ancestor (position: relative;) */
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    /*Position to parent element */
    transform: translate(-50%, -50%);
    /* Element starting position is left and top border. We centered our element to itself position. */
    text-align: center;
    /* Property for .btn because display: inline-block is treated as text */ }

.navigation {
  /* After choosing checkbox */
  /*...............*/ }
  .navigation__checkbox {
    display: none; }
  .navigation__button {
    background-color: #fff;
    height: 7rem;
    width: 7rem;
    position: fixed;
    top: 6rem;
    right: 6rem;
    border-radius: 50%;
    z-index: 2000;
    box-shadow: 0 1rem 3rem rgba(0, 0, 0, 0.1);
    text-align: center;
    /* To center span element */
    cursor: pointer;
    /* $breakpoint is argument that we pass in*/
    /* $breakpoint is argument that we pass in*/
    /* @content allows us to pass a block of code into a mixin */ }
    @media (max-width: 56.25em) {
      .navigation__button {
        /* Button position */
        top: 4rem;
        right: 4rem; } }
    @media (max-width: 37.5em) {
      .navigation__button {
        /* Button position */
        top: 3rem;
        right: 3rem; } }
  .navigation__background {
    height: 6rem;
    width: 6rem;
    border-radius: 50%;
    position: fixed;
    /* It doesn't change position as we scrolled the page,
    and now we can set its position with top, left properties. */
    top: 6.5rem;
    right: 6.5rem;
    background-image: radial-gradient(#7ed56f, #28b485);
    /* This gradient starts at the center of the element and fades out
     in all outer directions */
    z-index: 1000;
    transition: transform 0.8s cubic-bezier(0.86, 0, 0.07, 1);
    /* Custom animation, pages: cubic-bezier.com, easings.net */
    /* $breakpoint is argument that we pass in*/
    /* $breakpoint is argument that we pass in*/
    /* @content allows us to pass a block of code into a mixin */ }
    @media (max-width: 56.25em) {
      .navigation__background {
        /* Button position */
        top: 4.5rem;
        right: 4.5rem; } }
    @media (max-width: 37.5em) {
      .navigation__background {
        /* Button position */
        top: 3.5rem;
        right: 3.5rem; } }
  .navigation__nav {
    height: 100vh;
    /* As block element it is automatically take all avilable width */
    position: fixed;
    /* Entire page */
    top: 0;
    left: 0;
    z-index: 1500;
    opacity: 0;
    width: 0;
    /* To be invisible and there was no possibility of choosing it */
    transition: all 0.8s cubic-bezier(1, -0.69, 0.03, 1.33); }
  .navigation__list {
    position: absolute;
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
    list-style: none;
    text-align: center;
    width: 100%; }
  .navigation__item {
    margin: 1rem; }
  .navigation__link:link, .navigation__link:visited {
    display: inline-block;
    font-size: 3rem;
    font-weight: 300;
    padding: 1rem 2rem;
    color: #fff;
    text-decoration: none;
    text-transform: uppercase;
    background-image: linear-gradient(120deg, transparent 0%, transparent 50%, #fff 50%);
    /* background-image, tiled image 120deg, from 0% to 50% color, 50% to end white color */
    background-size: 220%;
    /* If we will slightly increasing it the white color of background-image will move to right */
    transition: all .4s; }
    .navigation__link:link span, .navigation__link:visited span {
      margin-right: 1rem;
      display: inline-block; }
  .navigation__link:hover, .navigation__link:active {
    background-position: 100%;
    color: #55c57a;
    transform: translateX(1rem); }
  .navigation__checkbox:checked ~ .navigation__background {
    transform: scale(80); }
  .navigation__checkbox:checked ~ .navigation__nav {
    opacity: 1;
    width: 100%; }
  .navigation__icon {
    position: relative;
    margin-top: 3.5rem; }
    .navigation__icon, .navigation__icon::before, .navigation__icon::after {
      width: 3rem;
      height: 2px;
      background-color: #333;
      display: inline-block; }
    .navigation__icon::before, .navigation__icon::after {
      content: "";
      position: absolute;
      left: 0;
      transition: all .2s; }
    .navigation__icon::before {
      top: -.8rem; }
    .navigation__icon::after {
      top: .8rem; }
  .navigation__button:hover .navigation__icon::before {
    /* Icon is a child element od button */
    top: -1rem; }
  .navigation__button:hover .navigation__icon::after {
    /* Icon is a child element od button */
    top: 1rem; }
  .navigation__checkbox:checked + .navigation__button .navigation__icon {
    /* If __checkbox is checked we select its direct brother and next its children */
    background-color: transparent; }
  .navigation__checkbox:checked + .navigation__button .navigation__icon::before {
    top: 0;
    transform: rotate(135deg); }
  .navigation__checkbox:checked + .navigation__button .navigation__icon::after {
    top: 0;
    transform: rotate(45deg); }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh;
  /*We are expanding our background up on the header to cover white triangle 
  95vh-70vh=20vh */
  /* $breakpoint is argument that we pass in*/ }
  @media (max-width: 56.25em) {
    .section-about {
      padding: 20rem 0; } }

.section-features {
  padding: 20rem 0;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/nat-4.jpg);
  /* We have two background images first on top gradient, and second under img */
  background-size: cover;
  /* Cover entire available space in section */
  transform: skewY(-7deg);
  /* Skew entire section */
  margin-top: -10rem;
  /* $breakpoint is argument that we pass in*/ }
  .section-features > * {
    /* All directed children (it means only first generation) of section features. In our example it will be "row".
  Without this every further children would be eg. skew*/
    transform: skewY(7deg);
    /* Unskew our row */ }
  @media (max-width: 56.25em) {
    .section-features {
      padding: 10rem 0; } }

.section-tours {
  background-color: #f7f7f7;
  padding: 25rem 0 15rem 0;
  /* Top Right Bottom Left */
  margin-top: -10rem;
  /* $breakpoint is argument that we pass in*/ }
  @media (max-width: 56.25em) {
    .section-tours {
      padding: 20rem 0 10rem 0; } }

.section-stories {
  position: relative;
  padding: 15rem 0;
  /* $breakpoint is argument that we pass in*/ }
  @media (max-width: 56.25em) {
    .section-stories {
      padding: 10rem 0; } }

.section-book {
  padding: 15rem 0;
  background-image: linear-gradient(to right bottom, #7ed56f, #28b485);
  /* $breakpoint is argument that we pass in*/ }
  @media (max-width: 56.25em) {
    .section-book {
      padding: 10rem 0; } }

.book {
  background-image: linear-gradient(105deg, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.9) 50%, transparent 50%), url(../img/nat-10.jpg);
  /* background-image: deg of our linear gradient, place where there is to be white,
  place where there is to be white, place where there is to start transparent, background image */
  background-size: 100%;
  border-radius: 3px;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.2);
  /* $breakpoint is argument that we pass in*/
  /* $breakpoint is argument that we pass in*/ }
  @media (max-width: 75em) {
    .book {
      background-image: linear-gradient(105deg, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.9) 65%, transparent 65%), url(../img/nat-10.jpg);
      background-size: cover;
      /* Covering entire container */ } }
  @media (max-width: 56.25em) {
    .book {
      background-image: linear-gradient(to right, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.9) 100%), url(../img/nat-10.jpg);
      background-size: cover; } }
  .book__form {
    width: 50%;
    padding: 6rem;
    /* $breakpoint is argument that we pass in*/
    /* $breakpoint is argument that we pass in*/ }
    @media (max-width: 75em) {
      .book__form {
        width: 65%; } }
    @media (max-width: 56.25em) {
      .book__form {
        width: 100%; } }
