.row {
  max-width: $grid-width;
  /*One of standards is 1140px, our ram id 10px so 1140px = 114rem.
  Max-width fills available space if there is not enought */
  // background-color: #eee;
  margin: 0 auto;
  /* Trick for center block element inside of another block element. Margin at tob and bottom is 0,
  left and right is auto */

  &:not(:last-child) {
  /* Sudo-class. Thanks to 'not' we select all except the last child (.row:last-child()) */
    margin-bottom: $gutter-vertical;

    @include respond(tab-port) {
      margin-bottom: $gutter-vertical-small;
    }
  }

  @include respond(tab-port) {
    max-width: 50rem;
    padding: 0 3rem;
  }

  @include clearfix;
  /* Our row (thanks to the fact that all childrens of it are floated) has a height od 0.
   So the element height collapsed and becomes 0. To avoid this we use mixin clearfix. */

  [class^="col-"] {
  /* We choose all elements with [attribute] eg. [alt="Logo"].
  Now we select all the attribute elements of the class that start with "col-" this is what ^= does.
  *= choose all elements that have "col-" wherever in the class attribute.
  $= choose all elements that have "col-" at the end of the class attribute. */ 

    // background-color: orange;
    float: left;
    /* Because we use here float layouts we need to float these columns. We always float to left side. */

    &:not(:last-child){
      margin-right: $gutter-horizontal;
      /* Gutters between columns are right-margins of left column */ 

      @include respond(tab-port) {
        margin-right: 0;
        margin-bottom: $gutter-vertical-small;
      }
    }

    @include respond(tab-port) {
      width: 100% !important;
      /* We are creating only one column in all rows */
    }
  }
  

  .col-1-of-2 {
    width: calc((100% - #{$gutter-horizontal}) / 2);
    /* calc function allows us to calculate using mixed units. In SASS in calc to use variables we need to wrap
    them into #{...}  */
  }

  .col-1-of-3 {
    width: calc((100% -  2 * #{$gutter-horizontal}) / 3);
  }

  .col-2-of-3 {
    width: calc(2 * ((100% -  2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal});
  }

  .col-1-of-4 {
    width: calc((100% -  3 * #{$gutter-horizontal}) / 4);
  }

  .col-2-of-4 {
    width: calc(2 * ((100% -  3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal});
  }

  .col-3-of-4 {
    width: calc(3 * ((100% -  3 * #{$gutter-horizontal}) / 4) + 2 * #{$gutter-horizontal});
  }
}